@page "/serviceitems/edit"
@using Microsoft.EntityFrameworkCore
@using Erp.Domain.Models
@inject IDbContextFactory<Erp2025.Data.Erp2025Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>ServiceItem</h2>
<hr />
@if (ServiceItem is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="ServiceItem" OnValidSubmit="UpdateServiceItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="ServiceItem.Id" value="@ServiceItem.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="ServiceItem.Name" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="ServiceItem.Description" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="remarks" class="form-label">Remarks:</label>
                    <InputText id="remarks" @bind-Value="ServiceItem.Remarks" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.Remarks" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="code" class="form-label">Code:</label>
                    <InputText id="code" @bind-Value="ServiceItem.Code" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.Code" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="sortorder" class="form-label">SortOrder:</label>
                    <InputNumber id="sortorder" @bind-Value="ServiceItem.SortOrder" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.SortOrder" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="ServiceItem.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdon" class="form-label">CreatedOn:</label>
                    <InputDate id="createdon" @bind-Value="ServiceItem.CreatedOn" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.CreatedOn" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lasteditby" class="form-label">LastEditBy:</label>
                    <InputText id="lasteditby" @bind-Value="ServiceItem.LastEditBy" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.LastEditBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastediton" class="form-label">LastEditOn:</label>
                    <InputDate id="lastediton" @bind-Value="ServiceItem.LastEditOn" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.LastEditOn" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isarchived" class="form-label">IsArchived:</label>
                    <InputCheckbox id="isarchived" @bind-Value="ServiceItem.IsArchived" class="form-check-input" />
                    <ValidationMessage For="() => ServiceItem.IsArchived" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isprivate" class="form-label">IsPrivate:</label>
                    <InputCheckbox id="isprivate" @bind-Value="ServiceItem.IsPrivate" class="form-check-input" />
                    <ValidationMessage For="() => ServiceItem.IsPrivate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isactive" class="form-label">IsActive:</label>
                    <InputCheckbox id="isactive" @bind-Value="ServiceItem.IsActive" class="form-check-input" />
                    <ValidationMessage For="() => ServiceItem.IsActive" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="itemtypeid" class="form-label">ItemTypeId:</label>
                    <InputNumber id="itemtypeid" @bind-Value="ServiceItem.ItemTypeId" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.ItemTypeId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="itemstatusid" class="form-label">ItemStatusId:</label>
                    <InputNumber id="itemstatusid" @bind-Value="ServiceItem.ItemStatusId" class="form-control" />
                    <ValidationMessage For="() => ServiceItem.ItemStatusId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/serviceitems">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private ServiceItem? ServiceItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        ServiceItem ??= await context.ServiceItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (ServiceItem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateServiceItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(ServiceItem!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ServiceItemExists(ServiceItem!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/serviceitems");
    }

    private bool ServiceItemExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.ServiceItem.Any(e => e.Id == id);
    }
}
