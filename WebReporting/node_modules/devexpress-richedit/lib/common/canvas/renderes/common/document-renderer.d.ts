import { IPictureRenderer } from '../../picture-renderer';
import { ColumnChange } from '../../../layout-formatter/changes/changes/column-change';
import { AnchoredPictureChange, LayoutChangeBase } from '../../../layout-formatter/changes/changes/layout-change-base';
import { PageAreaChange } from '../../../layout-formatter/changes/changes/page-area-change';
import { PageChange } from '../../../layout-formatter/changes/changes/page-change';
import { RenderLevelCalculator } from '../../../layout-formatter/floating/render-level-calculator';
import { LayoutTableBorder } from '../../../layout-formatter/table/borders/layout-table-border';
import { BookmarkBox } from '../../../layout/main-structures/layout-boxes/bookmark-box';
import { LayoutAnchoredObjectBox } from '../../../layout/main-structures/layout-boxes/layout-anchored-object-box';
import { LayoutAnchoredPictureBox } from '../../../layout/main-structures/layout-boxes/layout-anchored-picture-box';
import { LayoutAnchoredTextBox } from '../../../layout/main-structures/layout-boxes/layout-anchored-text-box';
import { LayoutBox } from '../../../layout/main-structures/layout-boxes/layout-box';
import { LayoutPictureBox } from '../../../layout/main-structures/layout-boxes/layout-picture-box';
import { LayoutColumn, ParagraphFrame } from '../../../layout/main-structures/layout-column';
import { LayoutPage } from '../../../layout/main-structures/layout-page';
import { LayoutPageArea } from '../../../layout/main-structures/layout-page-area';
import { LayoutRow } from '../../../layout/main-structures/layout-row';
import { LayoutTableColumnInfo } from '../../../layout/table/layout-table-info';
import { BorderLineStyle } from '../../../model/borders/enums';
import { LayoutBorder } from '../../../model/borders/layout-border';
import { CacheImageInfo as existingInfo } from '../../../model/caches/images';
import { Shape } from '../../../model/shapes/shape';
import { Rectangle } from '@devexpress/utils/lib/geometry/rectangle';
import { Size } from '@devexpress/utils/lib/geometry/size';
import { CanvasManager } from '../../canvas-manager';
import { ViewManager } from '../view-manager';
import { IRichEditControl } from '../../../interfaces/i-rich-edit-core';
export type GetSomeCanvasElementContainer = (node: Node) => Node;
export declare class SimpleViewCanvasSizeManager {
    protected canvasManager: CanvasManager;
    protected size: Size;
    private control;
    private resizeObserver;
    private isSizeObserving;
    private sizeUpdated;
    private resizeFrameId;
    constructor(canvasManager: CanvasManager, control: IRichEditControl);
    dispose(): void;
    protected changeSize(force: boolean): void;
    setViewMode(val: boolean): void;
    private changeSizeCore;
}
export declare abstract class DocumentRenderer implements IPictureRenderer {
    protected viewManager: ViewManager;
    private get cache();
    constructor(viewManager: ViewManager);
    onViewTypeChanged(): void;
    applyPageChange(layoutPage: LayoutPage, pageChange: PageChange): void;
    protected applyAnchorPictureChange(cache: DocumentRendererPageCache, layoutPage: LayoutPage, ancPicChange: AnchoredPictureChange): void;
    protected applyMainPageAreaChange(pageCache: DocumentRendererPageCache, layoutPage: LayoutPage, pageAreaChange: PageAreaChange): void;
    protected applyOtherPageAreaChange(cache: DocumentRendererPageCache, layoutPage: LayoutPage, pageAreaChange: PageAreaChange): void;
    protected applyColumnChange(pageAreaElement: Node, layoutPageArea: LayoutPageArea, columnChange: ColumnChange, level: number): void;
    static applyChange(topLevelNode: Node, change: LayoutChangeBase, getContainer: GetSomeCanvasElementContainer, getRenderedElement: () => HTMLElement): void;
    getPageRender(layoutPageIndex: number, layoutPage: LayoutPage): HTMLElement;
    renderPage(layoutPage: LayoutPage, layoutPageIndex: number, renderInnerContent: boolean): void;
    removePage(pageIndex: number): void;
    protected updatePageSize(page: LayoutPage, pageElement: HTMLElement): void;
    protected updatePageClasses(pageElement: HTMLElement): void;
    removePageContent(pageIndex: number): void;
    renderPageContainers(pageCache: DocumentRendererPageCache): [Node, Node, Node];
    protected abstract renderPageContentGetFloatingObjects(page: LayoutPage): LayoutAnchoredObjectBox[];
    protected renderPageContent(page: LayoutPage, pageIndex: number): void;
    protected static updatePageColor(pageElement: HTMLElement, newColor: number): void;
    protected static getPageAreaClassname(area: LayoutPageArea): string;
    protected renderPageArea(renderLevelCalculator: RenderLevelCalculator, pageCache: DocumentRendererPageCache, area: LayoutPageArea, textBox: LayoutAnchoredTextBox, renderContent?: boolean): HTMLElement;
    protected renderColumn(column: LayoutColumn, level: number, _isMainPageArea: boolean): HTMLElement;
    renderRow(row: LayoutRow, level: number): HTMLElement;
    protected renderBox(row: LayoutRow, box: LayoutBox, noNeedUnderlineAndStrikeout: boolean, level: number): BoxRenderResult;
    protected static renderBookmark(box: BookmarkBox, level: number): Element;
    renderPicture(box: LayoutPictureBox): string | Element;
    protected renderFloatingPicture(box: LayoutAnchoredPictureBox, renderLevelCalculator: RenderLevelCalculator): HTMLElement;
    protected static setShapePropertiesToElement(element: HTMLElement, shape: Shape, isTextBox: boolean): void;
    static setRotationInRadians(element: HTMLElement, rotation: number): boolean;
    protected static renderParagraphFrame(paragraphFrame: ParagraphFrame, level: number): HTMLElement;
    protected static updateParagraphFrame(frame: ParagraphFrame, frameElement: HTMLElement): void;
    protected static renderTable(tableColumnInfo: LayoutTableColumnInfo, level: number, showTableGridLines: boolean): HTMLElement;
    protected static renderTableBackgroundElement(className: string, container: Node, bound: Rectangle, tblXPos: number, tblYPos: number, color: number): void;
    protected static renderVerticalBorder(tableBordersContainer: Node, border: LayoutTableBorder, level: number, showTableGridLines: boolean): void;
    private static getTableGridLineBorderWidth;
    protected static renderHorizontalBorder(tableBordersContainer: Node, border: LayoutTableBorder, level: number, showTableGridLines: boolean): void;
    protected static createBorderElement(color: number, level: number): HTMLElement;
    protected static isNotRenderTableBorder(borderInfo: LayoutBorder): boolean;
    protected static mapBorderTypeToString: {
        [style: number]: string;
    };
    protected static borderTypeToString(style: BorderLineStyle): string;
    protected static getBorderTypeWidth(borderInfo: LayoutBorder): string;
    static getBorderTypeMinWidth(style: BorderLineStyle): number;
    static getServiceContainerCore(pageElement: Node): HTMLElement;
    static getSelectionContainerCore(pageElement: Node): Node;
    static getSearchSelectionContainerCore(pageElement: Node): Node;
    static getMisspelledSelectionContainerCore(pageElement: Node): Node;
    static getRangePermissionsContainerCore(pageElement: Node): Node;
    static isPageElementConsiderAllContainers(pageElement: Node): boolean;
    static getMainPageAreaContainerCore(pageElement: Node): Node;
    protected static getOtherPageAreaContainerCore(pageElement: Node): Node;
    protected static getAnchoredObjectsContainer(pageElement: Node): Node;
    protected static getTextBoxBackgroundContainer(pageElement: Node): Node;
    protected static getRowsContainerCore(columnElement: Node): Node;
    protected static getParagraphFramesContainerCore(columnElement: Node): Node;
    protected static getTablesContainerCore(columnElement: Node): Node;
    protected static getColumnsContainerCore(pageAreaElement: Node): Node;
    static renderContainer(className: string): HTMLDivElement;
    protected static removeFromContainerByIndex(node: Node, index: number, getContainer: GetSomeCanvasElementContainer): void;
    static replaceInContainer(node: Node, index: number, newRenderedElement: HTMLElement, getContainer: GetSomeCanvasElementContainer): void;
    static insertInContainer(node: Node, index: number, newRenderedElement: HTMLElement, getContainer: GetSomeCanvasElementContainer): void;
    protected static removeFromContainerByObject(id: number, container: Node, cache: Record<number, Node>): void;
    protected static replaceFromContainerByObject(id: number, container: Node, cache: Record<number, Node>, newNode: Node): void;
    protected static insertToContainerByObject(id: number, container: Node, cache: Record<number, Node>, newNode: Node): void;
    protected static isPageElementEmpty(pageElement: Node): boolean;
    renderPictureBoxContent(size: Size, cacheInfo: existingInfo, tip: string, altText: string): HTMLImageElement;
}
export declare class DocumentRendererPageCache {
    page: HTMLElement;
    otherAreas: Record<number, Node>;
    anchoredPicture: Record<number, Node>;
    textBoxBgElements: Record<number, HTMLElement>;
    constructor(page: HTMLElement);
    removeContent(): void;
    protected init(): void;
}
export declare class BoxRenderResult {
    html: string | DocumentFragment;
    increaseRowHeight: boolean;
    constructor(html: string | DocumentFragment, increaseRowHeight: boolean);
    toString(): string;
}
