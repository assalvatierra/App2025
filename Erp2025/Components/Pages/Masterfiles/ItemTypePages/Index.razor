@page "/itemtypes"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Erp.Domain.Models
@using Erp2025.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Erp2025.Data.Erp2025Context> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="itemtypes/create">Create New</a>
</p>
<div class="mb-3">
    <label for="TypeClassId" class="">Type Class :</label>
    <InputSelect id="TypeClassId" class="form-control" @bind-value="selectedItemClassId" @onchange="OnValueChanged">
        @foreach (var item in ItemTypeClasses)
        {
            <option value="@item.Id">@item.Name (@item.Description) </option>
        }
    </InputSelect>
</div>


<QuickGrid Class="table" Items="filteredItemTypes">
    <PropertyColumn Property="itemtype => itemtype.Name" />
    <PropertyColumn Property="itemtype => itemtype.Description" />
    <PropertyColumn Property="itemtype => itemtype.Remarks" />
    <PropertyColumn Property="itemtype => itemtype.Code" />
    <PropertyColumn Property="itemtype => itemtype.SortOrder" />
    <PropertyColumn Property="itemtype => itemtype.ItemTypeClassId" />

    <TemplateColumn Context="itemtype">
        <a href="@($"itemtypes/edit?id={itemtype.Id}")">Edit</a> |
        <a href="@($"itemtypes/details?id={itemtype.Id}")">Details</a> |
        <a href="@($"itemtypes/delete?id={itemtype.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private Erp2025Context context = default!;
    private List<ItemType> ItemTypes { get; set; } = new();
    private IQueryable<ItemType> filteredItemTypes { get; set; }

    private List<ItemTypeClass> ItemTypeClasses { get; set; } = new();
    private int selectedItemClassId { get; set; }

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        this.ItemTypeClasses = context.ItemTypeClass.ToList();
        this.ItemTypes = context.ItemType.ToList();
        this.filteredItemTypes = ItemTypes.AsQueryable(); // Initialize with all items
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        selectedItemClassId = int.Parse(e.Value.ToString());
        filteredItemTypes = context.ItemType
             .Where(item => item.ItemTypeClassId == selectedItemClassId)
             .AsQueryable();
    }

}
