import { FixedInterval } from '@devexpress/utils/lib/intervals/fixed';
import { DocumentModel } from '../../../model/document-model';
import { RangeCopy } from '../../../model/manipulators/range/create-range-copy-operation';
import { Paragraph } from '../../../model/paragraph/paragraph';
import { SubDocument } from '../../../model/sub-document';
import { HtmlBuilder } from './html-builder';
import { IExportModelOptions } from '../../i-document-exporter';
interface List {
    parentList?: List;
    numberingListIndex: number;
    listLevelIndex: number;
    start: number;
    end: number;
}
interface IHtmlExporterOptions {
    sanitaizeHyperlinkURIs?: boolean;
    convertRelativeURIsToAbsolute?: boolean;
}
export declare class HtmlExporter {
    rangeCopy: RangeCopy;
    private exportModelOptions;
    private htmlExporterOptions;
    private get modelManager();
    private get colorProvider();
    private get unitConverter();
    private get documentRenderer();
    private get lastMaxNumPages();
    private get pageIndex();
    constructor(exportModelOptions: IExportModelOptions, htmlExporterOptions?: IHtmlExporterOptions);
    getHtmlElementsByInterval(model: DocumentModel, subDocument: SubDocument, interval: FixedInterval, guidLabel: string): HtmlBuilder;
    getParagraphsByInterval(subDocument: SubDocument, interval: FixedInterval): Paragraph[];
    getListsByParagraphs(paragraphs: Paragraph[]): List[];
    private addParentTableRecursively;
    startList(model: DocumentModel, subDocument: SubDocument, interval: FixedInterval, builder: HtmlBuilder, lists: List[], position: number): void;
    private endList;
    private getHtmlText;
    private getBorderCssString;
    private getTableWidthUnitCssString;
    private getTableStyle;
    private getCellStyle;
    private getTextBoxStyleString;
}
export {};
