@page "/entities/details"
@using Microsoft.EntityFrameworkCore
@using Erp.Domain.Models
@inject IDbContextFactory<Erp2025.Data.Erp2025Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Entity</h2>
    <hr />
    @if (entity is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@entity.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@entity.Description</dd>
            <dt class="col-sm-2">Remarks</dt>
            <dd class="col-sm-10">@entity.Remarks</dd>
            <dt class="col-sm-2">Code</dt>
            <dd class="col-sm-10">@entity.Code</dd>
            <dt class="col-sm-2">SortOrder</dt>
            <dd class="col-sm-10">@entity.SortOrder</dd>
            <dt class="col-sm-2">ContactNo1</dt>
            <dd class="col-sm-10">@entity.ContactNo1</dd>
            <dt class="col-sm-2">ContactNo2</dt>
            <dd class="col-sm-10">@entity.ContactNo2</dd>
            <dt class="col-sm-2">Address1</dt>
            <dd class="col-sm-10">@entity.Address1</dd>
            <dt class="col-sm-2">Address2</dt>
            <dd class="col-sm-10">@entity.Address2</dd>
            <dt class="col-sm-2">Email1</dt>
            <dd class="col-sm-10">@entity.Email1</dd>
            <dt class="col-sm-2">Email2</dt>
            <dd class="col-sm-10">@entity.Email2</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@entity.CreatedBy</dd>
            <dt class="col-sm-2">CreatedOn</dt>
            <dd class="col-sm-10">@entity.CreatedOn</dd>
            <dt class="col-sm-2">LastEditBy</dt>
            <dd class="col-sm-10">@entity.LastEditBy</dd>
            <dt class="col-sm-2">LastEditOn</dt>
            <dd class="col-sm-10">@entity.LastEditOn</dd>
            <dt class="col-sm-2">IsArchived</dt>
            <dd class="col-sm-10">@entity.IsArchived</dd>
            <dt class="col-sm-2">IsPrivate</dt>
            <dd class="col-sm-10">@entity.IsPrivate</dd>
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@entity.IsActive</dd>
            <dt class="col-sm-2">EntityTypeId</dt>
            <dd class="col-sm-10">@entity.EntityTypeId</dd>
            <dt class="col-sm-2">EntityStatusId</dt>
            <dd class="col-sm-10">@entity.EntityStatusId</dd>
            <dt class="col-sm-2">BusinessUnitId</dt>
            <dd class="col-sm-10">@entity.BusinessUnitId</dd>
            <dt class="col-sm-2">RefCityId</dt>
            <dd class="col-sm-10">@entity.RefCityId</dd>
        </dl>
        <div>
            <a href="@($"/entities/edit?id={entity.Id}")">Edit</a> |
            <a href="@($"/entities")">Back to List</a>
        </div>
    }
</div>

@code {
    private Entity? entity;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        entity = await context.Entity.FirstOrDefaultAsync(m => m.Id == Id);

        if (entity is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
