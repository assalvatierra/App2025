import { BorderInfo } from '../../../../model/borders/border-info';
import { TableBordersBase } from '../../../../model/borders/table-border-base';
import { ColorProvider } from '../../../../model/color/color-provider';
import { IMaskedProperties } from '../../../../model/interfaces';
import { TableWidthUnit } from '../../../../model/tables/secondary-structures/table-units';
import { LineSpacingUnit } from '../../../../../common/model/paragraph/paragraph-properties';
export declare class HtmlImportUtils {
    static getTableWidthUnit(stringValue: string): TableWidthUnit;
    static getValueInTwips(stringValue: string): number;
    static getBorderInfo(colorProvider: ColorProvider, borderWidth: string, borderStyle: string, borderColor: string): BorderInfo;
    static importBorder<TMask, TProps extends IMaskedProperties<TMask>>(colorProvider: ColorProvider, props: TProps, borders: TableBordersBase, mask: TMask, setBorder: (brds: TableBordersBase, brd: BorderInfo) => void, borderWidth: string, borderStyle: string, borderColor: string): void;
    static setBorders<TMask, TProps extends IMaskedProperties<TMask>>(colorProvider: ColorProvider, props: TProps, borders: TableBordersBase, style: CSSStyleDeclaration, topMask: TMask, rightMask: TMask, bottomMask: TMask, leftMask: TMask): void;
    private static MapBorderStyleToType;
    static getPropertyByMap<T>(map: {
        [key: string]: T;
    }, elementBy: string, defaultValue: T): T;
    static getLineSpacing(value: string, lineHeightRule?: string): LineSpacingUnit;
    private static getLineSpacingAsMultiple;
}
