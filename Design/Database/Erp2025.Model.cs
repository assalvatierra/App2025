//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2/18/2025 9:53:19 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Model
{

    public partial class Model : DbContext
    {

        public Model() :
            base()
        {
            OnCreated();
        }

        public Model(DbContextOptions<Model> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Customer> Customers
        {
            get;
            set;
        }

        public virtual DbSet<Contact> Contact
        {
            get;
            set;
        }

        public virtual DbSet<Supplier> Supplier
        {
            get;
            set;
        }

        public virtual DbSet<Address> Address
        {
            get;
            set;
        }

        public virtual DbSet<Customer_Contact> Customer_Contact
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.CustomerMapping(modelBuilder);
            this.CustomizeCustomerMapping(modelBuilder);

            this.ContactMapping(modelBuilder);
            this.CustomizeContactMapping(modelBuilder);

            this.SupplierMapping(modelBuilder);
            this.CustomizeSupplierMapping(modelBuilder);

            this.AddressMapping(modelBuilder);
            this.CustomizeAddressMapping(modelBuilder);

            this.Customer_ContactMapping(modelBuilder);
            this.CustomizeCustomer_ContactMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Customer Mapping

        private void CustomerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>().ToTable(@"Customer");
            modelBuilder.Entity<Customer>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Customer>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Customer>().Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<Customer>().HasKey(@"Id");
        }

        partial void CustomizeCustomerMapping(ModelBuilder modelBuilder);

        #endregion

        #region Contact Mapping

        private void ContactMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Contact>().ToTable(@"Contact");
            modelBuilder.Entity<Contact>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Contact>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().HasKey(@"Id");
        }

        partial void CustomizeContactMapping(ModelBuilder modelBuilder);

        #endregion

        #region Supplier Mapping

        private void SupplierMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Supplier>().ToTable(@"Supplier");
            modelBuilder.Entity<Supplier>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Supplier>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Supplier>().Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<Supplier>().HasKey(@"Id");
        }

        partial void CustomizeSupplierMapping(ModelBuilder modelBuilder);

        #endregion

        #region Address Mapping

        private void AddressMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Address>().ToTable(@"Address");
            modelBuilder.Entity<Address>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Address>().HasKey(@"Id");
        }

        partial void CustomizeAddressMapping(ModelBuilder modelBuilder);

        #endregion

        #region Customer_Contact Mapping

        private void Customer_ContactMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer_Contact>().ToTable(@"Customer_Contact");
            modelBuilder.Entity<Customer_Contact>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Customer_Contact>().Property<int>(x => x.CustomerId).HasColumnName(@"CustomerId").ValueGeneratedNever();
            modelBuilder.Entity<Customer_Contact>().HasKey(@"Id");
        }

        partial void CustomizeCustomer_ContactMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer_Contact>().HasOne(x => x.Customer).WithMany(op => op.Customer_Contacts).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"CustomerId");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
