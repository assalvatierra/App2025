/**
* DevExpress Analytics (core\internal\requestManager.js)
* Version:  24.2.5
* Build date: Feb 17, 2025
* Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { FetchRequestManager } from './_fetchRequestManager';
import { isDefined } from './_isDefined';
import { AjaxRequestManager } from './_ajaxRequestManager';
import { toQueryParameters } from '../../serializer/_utils';
export var RequestContentType;
(function (RequestContentType) {
    RequestContentType["Json"] = "application/json";
    RequestContentType["FormUrlEncoded"] = "application/x-www-form-urlencoded";
})(RequestContentType || (RequestContentType = {}));
export let _requestContentType;
let _requestManagerInstance = null;
export function encodeURIExtended(str) {
    const replaceRegs = [
        { reg: new RegExp(/\(/g), value: '%28' },
        { reg: new RegExp(/\)/g), value: '%29' }
    ];
    let encoded = encodeURIComponent(str);
    replaceRegs.forEach(replaceRule => encoded = encoded.replace(replaceRule.reg, replaceRule.value));
    return encoded;
}
export const PrepareRequestArgs = (args, encode = false, stringify = true) => {
    let preparedArgs = undefined;
    if (requestManager.getRequestContentType() === RequestContentType.FormUrlEncoded || !_requestContentType) {
        if (stringify)
            preparedArgs = JSON.stringify(args);
        if (encode)
            preparedArgs = encodeURIExtended(args);
    }
    return preparedArgs ?? JSON.stringify(args);
};
export const GetRequestBody = (data) => {
    let body = {};
    const queryParams = toQueryParameters(data);
    if (requestManager.getRequestContentType() === RequestContentType.Json) {
        body = JSON.stringify(data);
    }
    else if (requestManager.getRequestContentType() === RequestContentType.FormUrlEncoded) {
        body = new URLSearchParams(queryParams);
    }
    return body;
};
export const requestManager = {
    getInstance: function (requestManagerSetup) {
        if (!_requestManagerInstance) {
            this._initialize(requestManagerSetup);
        }
        return _requestManagerInstance;
    },
    _initialize: function (requestManagerSetup) {
        const { ajaxSetup, fetchSetup } = requestManagerSetup ?? {};
        if (isDefined(ajaxSetup?.ajaxSettings) && isDefined(fetchSetup?.fetchSettings)) {
            throw new Error('You cannot configure more than one type of request manager. Use either ajaxSetup or fetchSetup for configuration, but not both.');
        }
        if (isDefined(ajaxSetup?.ajaxSettings)) {
            requestManager.initialize(new AjaxRequestManager(() => {
                this._setRequestHeader(ajaxSetup.ajaxSettings);
                return ajaxSetup.ajaxSettings;
            }, (data) => {
                if (data && requestManager.getRequestContentType() === RequestContentType.Json)
                    data = JSON.stringify(data);
                return data;
            }));
            this._setRequestHeader(ajaxSetup.ajaxSettings);
            return;
        }
        requestManager.initialize(new FetchRequestManager(() => {
            this._setRequestHeader(fetchSetup?.fetchSettings);
            return fetchSetup?.fetchSettings;
        }, GetRequestBody, PrepareRequestArgs));
        this._setRequestHeader(fetchSetup?.fetchSettings);
    },
    _setRequestHeader: function (settings) {
        if (!settings)
            return;
        if (_requestContentType) {
            if (!settings.headers)
                settings.headers = {};
            if (!settings.headers['Content-Type']?.startsWith(_requestContentType))
                settings.headers['Content-Type'] = _requestContentType;
        }
        else if (settings.headers && settings.headers['Content-Type']) {
            _requestContentType = settings.headers['Content-Type'];
        }
        else {
            _requestContentType = RequestContentType.FormUrlEncoded;
            if (!settings.headers)
                settings.headers = {};
            settings.headers['Content-Type'] = _requestContentType;
        }
        settings['contentType'] = settings.headers['Content-Type'];
    },
    _setRequestContentType: function (contentType) {
        if (contentType === 'Json')
            _requestContentType = RequestContentType.Json;
        else if (contentType === 'FormUrlEncoded')
            _requestContentType = RequestContentType.FormUrlEncoded;
    },
    initialize: function (requestManagerInstance) {
        _requestManagerInstance = requestManagerInstance;
    },
    getRequestContentType: function () {
        if (!_requestContentType)
            return;
        if (_requestContentType.startsWith(RequestContentType.Json))
            return RequestContentType.Json;
        if (_requestContentType.startsWith(RequestContentType.FormUrlEncoded))
            return RequestContentType.FormUrlEncoded;
    }
};
export function _isFetchConfigured() {
    return _requestManagerInstance.useFetch;
}
