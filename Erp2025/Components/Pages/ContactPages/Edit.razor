@page "/contacts/edit"
@using Microsoft.EntityFrameworkCore
@using Erp.Domain.Models
@inject IDbContextFactory<Erp2025.Data.Erp2025Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Contact</h2>
<hr />
@if (Contact is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Contact" OnValidSubmit="UpdateContact" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Contact.Id" value="@Contact.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Contact.Name" class="form-control" />
                    <ValidationMessage For="() => Contact.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="remarks" class="form-label">Remarks:</label>
                    <InputText id="remarks" @bind-Value="Contact.Remarks" class="form-control" />
                    <ValidationMessage For="() => Contact.Remarks" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactno1" class="form-label">ContactNo1:</label>
                    <InputText id="contactno1" @bind-Value="Contact.ContactNo1" class="form-control" />
                    <ValidationMessage For="() => Contact.ContactNo1" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactno2" class="form-label">ContactNo2:</label>
                    <InputText id="contactno2" @bind-Value="Contact.ContactNo2" class="form-control" />
                    <ValidationMessage For="() => Contact.ContactNo2" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address1" class="form-label">Address1:</label>
                    <InputText id="address1" @bind-Value="Contact.Address1" class="form-control" />
                    <ValidationMessage For="() => Contact.Address1" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address2" class="form-label">Address2:</label>
                    <InputText id="address2" @bind-Value="Contact.Address2" class="form-control" />
                    <ValidationMessage For="() => Contact.Address2" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email1" class="form-label">Email1:</label>
                    <InputText id="email1" @bind-Value="Contact.Email1" class="form-control" />
                    <ValidationMessage For="() => Contact.Email1" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email2" class="form-label">Email2:</label>
                    <InputText id="email2" @bind-Value="Contact.Email2" class="form-control" />
                    <ValidationMessage For="() => Contact.Email2" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cityid" class="form-label">CityId:</label>
                    <InputNumber id="cityid" @bind-Value="Contact.CityId" class="form-control" />
                    <ValidationMessage For="() => Contact.CityId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="countryid" class="form-label">CountryId:</label>
                    <InputText id="countryid" @bind-Value="Contact.CountryId" class="form-control" />
                    <ValidationMessage For="() => Contact.CountryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Contact.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Contact.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdon" class="form-label">CreatedOn:</label>
                    <InputDate id="createdon" @bind-Value="Contact.CreatedOn" class="form-control" />
                    <ValidationMessage For="() => Contact.CreatedOn" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lasteditby" class="form-label">LastEditBy:</label>
                    <InputText id="lasteditby" @bind-Value="Contact.LastEditBy" class="form-control" />
                    <ValidationMessage For="() => Contact.LastEditBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastediton" class="form-label">LastEditOn:</label>
                    <InputDate id="lastediton" @bind-Value="Contact.LastEditOn" class="form-control" />
                    <ValidationMessage For="() => Contact.LastEditOn" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isarchived" class="form-label">IsArchived:</label>
                    <InputCheckbox id="isarchived" @bind-Value="Contact.IsArchived" class="form-check-input" />
                    <ValidationMessage For="() => Contact.IsArchived" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isprivate" class="form-label">IsPrivate:</label>
                    <InputCheckbox id="isprivate" @bind-Value="Contact.IsPrivate" class="form-check-input" />
                    <ValidationMessage For="() => Contact.IsPrivate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isactive" class="form-label">IsActive:</label>
                    <InputCheckbox id="isactive" @bind-Value="Contact.IsActive" class="form-check-input" />
                    <ValidationMessage For="() => Contact.IsActive" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/contacts">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Contact? Contact { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Contact ??= await context.Contact.FirstOrDefaultAsync(m => m.Id == Id);

        if (Contact is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateContact()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Contact!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ContactExists(Contact!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/contacts");
    }

    private bool ContactExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Contact.Any(e => e.Id == id);
    }
}
