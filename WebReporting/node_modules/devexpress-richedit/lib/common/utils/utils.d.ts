import { Point } from '@devexpress/utils/lib/geometry/point';
import { IModelManager } from '../model-manager';
export declare function rotatePoint(point: Point, angle: number, center: Point): Point;
export declare class SearchTreeItemResult<T> {
    readonly parentList: T[];
    readonly itemIndex: number;
    readonly item: T;
    constructor(parentList: T[], itemIndex: number, item: T);
}
export declare function searchTreeItem<T extends {
    items?: T[];
}>(items: T[], comparer: (item: T) => boolean): SearchTreeItemResult<T> | null;
export declare function convertToFunction(func: any): any | null;
export declare function splitByLines(text: string): string[];
export interface IUrlValidationOptions {
    allowedSchemes?: string[];
}
export declare function createUrlValidationOptions(modelManager: IModelManager): IUrlValidationOptions;
export declare class UrlUtils {
    static EmptyPage: string;
    static isValid(url: string, options?: IUrlValidationOptions): boolean;
    static isRelative(url: string): boolean;
    static convertToAbsolute(url: string): URL | null;
    static splitUrlByAnchor(url: string): [url: string, anchor: string];
}
