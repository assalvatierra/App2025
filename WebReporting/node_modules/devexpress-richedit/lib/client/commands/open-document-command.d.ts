import { CommandBase, CommandSimpleOptions } from '../../common/commands/command-base';
import { SimpleCommandState } from '../../common/commands/command-states';
import { DocumentFormat } from '../../common/document-format';
export declare class OpenDocumentCommand extends CommandBase<SimpleCommandState> {
    getState(): SimpleCommandState;
    executeCore(_state: SimpleCommandState, options: CommandSimpleOptions<FileInfo>): boolean;
    private suppressUpdateFields;
    private executeOpening;
    private showErrorDialog;
    updateSomeFields(): void;
    private beforeOpen;
    private openCore;
    isEnabled(): boolean;
    isEnabledInClosedDocument(): boolean;
    isEnabledInReadOnlyMode(): boolean;
    private static getFileAndDocumentFormat;
    private static getDocumentFormatByFileName;
    private static getDocumentExtensionByFileName;
    static getFileNameWithoutExtension(fileName: string): string;
}
export type ImportDocumentCallback = (importSuccess: boolean, importFailReason: string | null) => void;
export declare class FileInfo {
    fileContent: File | Blob | ArrayBuffer | string;
    fileName: string;
    documentFormat: DocumentFormat;
    callback: ImportDocumentCallback | null;
    constructor(callback: ImportDocumentCallback | null, fileContent: File | Blob | ArrayBuffer | string, fileName?: string, documentFormat?: DocumentFormat);
}
