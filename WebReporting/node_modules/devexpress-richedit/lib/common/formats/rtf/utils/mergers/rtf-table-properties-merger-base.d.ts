import { DocumentModel } from '../../../../model/document-model';
import { Table } from '../../../../model/tables/main-structures/table';
import { TableCell } from '../../../../model/tables/main-structures/table-cell';
import { TableRow } from '../../../../model/tables/main-structures/table-row';
import { TableCellProperties } from '../../../../model/tables/properties/table-cell-properties';
import { TableProperties } from '../../../../model/tables/properties/table-properties';
import { TableRowProperties } from '../../../../model/tables/properties/table-row-properties';
import { ConditionalTableStyleFormatting } from '../../../../model/tables/secondary-structures/table-base-structures';
import { TableConditionalStyle } from '../../../../model/tables/styles/table-conditional-style';
import { TableStyle } from '../../../../model/tables/styles/table-style';
export declare abstract class RtfTablePropertiesMergerBase<TProps extends TableCellProperties | TableRowProperties | TableProperties, TObj extends TableCell | TableRow | Table> {
    readonly model: DocumentModel;
    constructor(model: DocumentModel);
    abstract get defaultProperties(): TProps;
    abstract getMergedProperties(object: TObj): TProps;
    abstract getStyleMergedProperties(style: TableConditionalStyle, tableStyle: TableStyle, conditionalTFormatting: ConditionalTableStyleFormatting): TProps;
    protected abstract merge(source: TProps, tableStyle: TableStyle, object: TObj, tablePropertiesException: TableProperties, conditionalTFormatting: ConditionalTableStyleFormatting): TProps;
}
