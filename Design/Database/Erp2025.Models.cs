//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/30/2025 9:06:19 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Erp.Domain.Models
{

    public partial class Models : DbContext
    {

        public Models() :
            base()
        {
            OnCreated();
        }

        public Models(DbContextOptions<Models> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Contact> Contact
        {
            get;
            set;
        }

        public virtual DbSet<JobMain> JobMain
        {
            get;
            set;
        }

        public virtual DbSet<JobService> JobService
        {
            get;
            set;
        }

        public virtual DbSet<ServiceItem> ServiceItem
        {
            get;
            set;
        }

        public virtual DbSet<JobCustomer> JobCustomer
        {
            get;
            set;
        }

        public virtual DbSet<JobContact> JobContact
        {
            get;
            set;
        }

        public virtual DbSet<JobServiceContact> JobServiceContact
        {
            get;
            set;
        }

        public virtual DbSet<Entity> Entity
        {
            get;
            set;
        }

        public virtual DbSet<ItemType> ItemType
        {
            get;
            set;
        }

        public virtual DbSet<EntityContact> EntityContact
        {
            get;
            set;
        }

        public virtual DbSet<ItemStatus> ItemStatus
        {
            get;
            set;
        }

        public virtual DbSet<ItemTypeClass> ItemTypeClass
        {
            get;
            set;
        }

        public virtual DbSet<ItemStatusClass> ItemStatusClass
        {
            get;
            set;
        }

        public virtual DbSet<BusinessUnit> BusinessUnit
        {
            get;
            set;
        }

        public virtual DbSet<RefCity> RefCity
        {
            get;
            set;
        }

        public virtual DbSet<RefCountry> RefCountry
        {
            get;
            set;
        }

        public virtual DbSet<Agent> Agent
        {
            get;
            set;
        }

        public virtual DbSet<Agent_instructions> Agent_instructions
        {
            get;
            set;
        }

        public virtual DbSet<Agent_bin> Agent_bin
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.ContactMapping(modelBuilder);
            this.CustomizeContactMapping(modelBuilder);

            this.JobMainMapping(modelBuilder);
            this.CustomizeJobMainMapping(modelBuilder);

            this.JobServiceMapping(modelBuilder);
            this.CustomizeJobServiceMapping(modelBuilder);

            this.ServiceItemMapping(modelBuilder);
            this.CustomizeServiceItemMapping(modelBuilder);

            this.JobCustomerMapping(modelBuilder);
            this.CustomizeJobCustomerMapping(modelBuilder);

            this.JobContactMapping(modelBuilder);
            this.CustomizeJobContactMapping(modelBuilder);

            this.JobServiceContactMapping(modelBuilder);
            this.CustomizeJobServiceContactMapping(modelBuilder);

            this.EntityMapping(modelBuilder);
            this.CustomizeEntityMapping(modelBuilder);

            this.ItemTypeMapping(modelBuilder);
            this.CustomizeItemTypeMapping(modelBuilder);

            this.EntityContactMapping(modelBuilder);
            this.CustomizeEntityContactMapping(modelBuilder);

            this.ItemStatusMapping(modelBuilder);
            this.CustomizeItemStatusMapping(modelBuilder);

            this.ItemTypeClassMapping(modelBuilder);
            this.CustomizeItemTypeClassMapping(modelBuilder);

            this.ItemStatusClassMapping(modelBuilder);
            this.CustomizeItemStatusClassMapping(modelBuilder);

            this.BusinessUnitMapping(modelBuilder);
            this.CustomizeBusinessUnitMapping(modelBuilder);

            this.RefCityMapping(modelBuilder);
            this.CustomizeRefCityMapping(modelBuilder);

            this.RefCountryMapping(modelBuilder);
            this.CustomizeRefCountryMapping(modelBuilder);

            this.AgentMapping(modelBuilder);
            this.CustomizeAgentMapping(modelBuilder);

            this.Agent_instructionsMapping(modelBuilder);
            this.CustomizeAgent_instructionsMapping(modelBuilder);

            this.Agent_binMapping(modelBuilder);
            this.CustomizeAgent_binMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Contact Mapping

        private void ContactMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Contact>().ToTable(@"Contact");
            modelBuilder.Entity<Contact>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Contact>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.ContactNo1).HasColumnName(@"ContactNo1").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.ContactNo2).HasColumnName(@"ContactNo2").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.Address1).HasColumnName(@"Address1").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.Address2).HasColumnName(@"Address2").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.Email1).HasColumnName(@"Email1").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.Email2).HasColumnName(@"Email2").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.LastEditBy).HasColumnName(@"LastEditBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.LastEditOn).HasColumnName(@"LastEditOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isArchived).HasColumnName(@"isArchived").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isPrivate).HasColumnName(@"isPrivate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isActive).HasColumnName(@"isActive").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().Property<int>(x => x.TypeId).HasColumnName(@"TypeId").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().Property<int>(x => x.StatusId).HasColumnName(@"StatusId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Contact>().Property<int>(x => x.RefCityId).HasColumnName(@"RefCityId").ValueGeneratedNever();
            modelBuilder.Entity<Contact>().HasKey(@"Id");
        }

        partial void CustomizeContactMapping(ModelBuilder modelBuilder);

        #endregion

        #region JobMain Mapping

        private void JobMainMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<JobMain>().ToTable(@"JobMain");
            modelBuilder.Entity<JobMain>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<JobMain>().Property<System.DateTime>(x => x.JobDate).HasColumnName(@"JobDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().Property<string>(x => x.Description).HasColumnName(@"Description").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.LastEditBy).HasColumnName(@"LastEditBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.LastEditOn).HasColumnName(@"LastEditOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isArchived).HasColumnName(@"isArchived").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isPrivate).HasColumnName(@"isPrivate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isActive).HasColumnName(@"isActive").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().Property<int>(x => x.ItemStatusId).HasColumnName(@"ItemStatusId").ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().Property<int>(x => x.BusinessUnitId).HasColumnName(@"BusinessUnitId").ValueGeneratedNever();
            modelBuilder.Entity<JobMain>().HasKey(@"Id");
        }

        partial void CustomizeJobMainMapping(ModelBuilder modelBuilder);

        #endregion

        #region JobService Mapping

        private void JobServiceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<JobService>().ToTable(@"JobService");
            modelBuilder.Entity<JobService>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<JobService>().Property<int>(x => x.JobMainId).HasColumnName(@"JobMainId").ValueGeneratedNever();
            modelBuilder.Entity<JobService>().Property<string>(x => x.Particulars).HasColumnName(@"Particulars").ValueGeneratedNever();
            modelBuilder.Entity<JobService>().Property<System.DateTime?>(x => x.DateStart).HasColumnName(@"DateStart").ValueGeneratedNever();
            modelBuilder.Entity<JobService>().Property<System.DateTime?>(x => x.DateEnd).HasColumnName(@"DateEnd").ValueGeneratedNever();
            modelBuilder.Entity<JobService>().Property<decimal?>(x => x.QuotedAmt).HasColumnName(@"QuotedAmt").ValueGeneratedNever();
            modelBuilder.Entity<JobService>().Property<decimal?>(x => x.SupplierAmt).HasColumnName(@"SupplierAmt").ValueGeneratedNever();
            modelBuilder.Entity<JobService>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobService>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobService>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.LastEditBy).HasColumnName(@"LastEditBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobService>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.LastEditOn).HasColumnName(@"LastEditOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobService>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isArchived).HasColumnName(@"isArchived").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobService>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isPrivate).HasColumnName(@"isPrivate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobService>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isActive).HasColumnName(@"isActive").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobService>().Property<int?>(x => x.ServiceItemId).HasColumnName(@"ServiceItemId").ValueGeneratedNever();
            modelBuilder.Entity<JobService>().Property<int?>(x => x.SupplierId).HasColumnName(@"SupplierId").ValueGeneratedNever();
            modelBuilder.Entity<JobService>().Property<int>(x => x.ItemStatusId).HasColumnName(@"ItemStatusId").ValueGeneratedNever();
            modelBuilder.Entity<JobService>().Property<int>(x => x.SortOrder).HasColumnName(@"SortOrder").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobService>().HasKey(@"Id");
        }

        partial void CustomizeJobServiceMapping(ModelBuilder modelBuilder);

        #endregion

        #region ServiceItem Mapping

        private void ServiceItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ServiceItem>().ToTable(@"ServiceItem");
            modelBuilder.Entity<ServiceItem>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Code).HasColumnName(@"Code").ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.EntityInfo).Property<int?>(x => x.SortOrder).HasColumnName(@"SortOrder").ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.LastEditBy).HasColumnName(@"LastEditBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.LastEditOn).HasColumnName(@"LastEditOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isArchived).HasColumnName(@"isArchived").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isPrivate).HasColumnName(@"isPrivate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isActive).HasColumnName(@"isActive").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().Property<int>(x => x.ItemTypeId).HasColumnName(@"ItemTypeId").ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().Property<int>(x => x.ItemStatusId).HasColumnName(@"ItemStatusId").ValueGeneratedNever();
            modelBuilder.Entity<ServiceItem>().HasKey(@"Id");
        }

        partial void CustomizeServiceItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region JobCustomer Mapping

        private void JobCustomerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<JobCustomer>().ToTable(@"JobCustomer");
            modelBuilder.Entity<JobCustomer>().Property<int>(x => x.Id).HasColumnName(@"Id").ValueGeneratedOnAdd();
            modelBuilder.Entity<JobCustomer>().Property<int>(x => x.JobMainId).HasColumnName(@"JobMainId").ValueGeneratedNever();
            modelBuilder.Entity<JobCustomer>().Property<int>(x => x.CustomerId).HasColumnName(@"CustomerId").ValueGeneratedNever();
            modelBuilder.Entity<JobCustomer>().Property<bool>(x => x.IsPrimary).HasColumnName(@"IsPrimary").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobCustomer>().Property<bool>(x => x.IsBillTo).HasColumnName(@"IsBillTo").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobCustomer>().Property<string>(x => x.Notes).HasColumnName(@"Notes").ValueGeneratedNever();
            modelBuilder.Entity<JobCustomer>().HasKey(@"Id");
        }

        partial void CustomizeJobCustomerMapping(ModelBuilder modelBuilder);

        #endregion

        #region JobContact Mapping

        private void JobContactMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<JobContact>().ToTable(@"JobContact");
            modelBuilder.Entity<JobContact>().Property<int>(x => x.Id).HasColumnName(@"Id").ValueGeneratedOnAdd();
            modelBuilder.Entity<JobContact>().Property<int>(x => x.JobMainId).HasColumnName(@"JobMainId").ValueGeneratedNever();
            modelBuilder.Entity<JobContact>().Property<int>(x => x.ContactId).HasColumnName(@"ContactId").ValueGeneratedNever();
            modelBuilder.Entity<JobContact>().Property<bool>(x => x.IsPrimary).HasColumnName(@"IsPrimary").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobContact>().Property<string>(x => x.Notes).HasColumnName(@"Notes").ValueGeneratedNever();
            modelBuilder.Entity<JobContact>().HasKey(@"Id");
        }

        partial void CustomizeJobContactMapping(ModelBuilder modelBuilder);

        #endregion

        #region JobServiceContact Mapping

        private void JobServiceContactMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<JobServiceContact>().ToTable(@"JobServiceContact");
            modelBuilder.Entity<JobServiceContact>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<JobServiceContact>().Property<int>(x => x.ContactId).HasColumnName(@"ContactId").ValueGeneratedNever();
            modelBuilder.Entity<JobServiceContact>().Property<int>(x => x.JobServiceId).HasColumnName(@"JobServiceId").ValueGeneratedNever();
            modelBuilder.Entity<JobServiceContact>().Property<string>(x => x.Notes).HasColumnName(@"Notes").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobServiceContact>().Property<bool>(x => x.IsPrimary).HasColumnName(@"IsPrimary").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JobServiceContact>().HasKey(@"Id");
        }

        partial void CustomizeJobServiceContactMapping(ModelBuilder modelBuilder);

        #endregion

        #region Entity Mapping

        private void EntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Entity>().ToTable(@"Entity");
            modelBuilder.Entity<Entity>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Code).HasColumnName(@"Code").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.EntityInfo).Property<int?>(x => x.SortOrder).HasColumnName(@"SortOrder").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.ContactNo1).HasColumnName(@"ContactNo1").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.ContactNo2).HasColumnName(@"ContactNo2").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.Address1).HasColumnName(@"Address1").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.Address2).HasColumnName(@"Address2").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.Email1).HasColumnName(@"Email1").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.ContactInfo).Property<string>(x => x.Email2).HasColumnName(@"Email2").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.CreatedBy).HasColumnName(@"CreatedBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.RecordInfo).Property<string>(x => x.LastEditBy).HasColumnName(@"LastEditBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.RecordInfo).Property<System.DateTime>(x => x.LastEditOn).HasColumnName(@"LastEditOn").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isArchived).HasColumnName(@"isArchived").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isPrivate).HasColumnName(@"isPrivate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Entity>().OwnsOne(t => t.RecordInfo).Property<bool>(x => x.isActive).HasColumnName(@"isActive").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Entity>().Property<int>(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().Property<int>(x => x.EntityStatusId).HasColumnName(@"EntityStatusId").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().Property<int>(x => x.BusinessUnitId).HasColumnName(@"BusinessUnitId").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().Property<int>(x => x.RefCityId).HasColumnName(@"RefCityId").ValueGeneratedNever();
            modelBuilder.Entity<Entity>().HasKey(@"Id");
        }

        partial void CustomizeEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region ItemType Mapping

        private void ItemTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ItemType>().ToTable(@"ItemType");
            modelBuilder.Entity<ItemType>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ItemType>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ItemType>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<ItemType>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<ItemType>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Code).HasColumnName(@"Code").ValueGeneratedNever();
            modelBuilder.Entity<ItemType>().OwnsOne(t => t.EntityInfo).Property<int?>(x => x.SortOrder).HasColumnName(@"SortOrder").ValueGeneratedNever();
            modelBuilder.Entity<ItemType>().Property<int>(x => x.ItemTypeClassId).HasColumnName(@"ItemTypeClassId").ValueGeneratedNever();
            modelBuilder.Entity<ItemType>().HasKey(@"Id");
        }

        partial void CustomizeItemTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region EntityContact Mapping

        private void EntityContactMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EntityContact>().ToTable(@"EntityContact");
            modelBuilder.Entity<EntityContact>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EntityContact>().Property<int>(x => x.ContactId).HasColumnName(@"ContactId").ValueGeneratedNever();
            modelBuilder.Entity<EntityContact>().Property<int>(x => x.EntityId).HasColumnName(@"EntityId").ValueGeneratedNever();
            modelBuilder.Entity<EntityContact>().Property<string>(x => x.Notes).HasColumnName(@"Notes").ValueGeneratedNever();
            modelBuilder.Entity<EntityContact>().HasKey(@"Id");
        }

        partial void CustomizeEntityContactMapping(ModelBuilder modelBuilder);

        #endregion

        #region ItemStatus Mapping

        private void ItemStatusMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ItemStatus>().ToTable(@"ItemStatus");
            modelBuilder.Entity<ItemStatus>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ItemStatus>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ItemStatus>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<ItemStatus>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<ItemStatus>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Code).HasColumnName(@"Code").ValueGeneratedNever();
            modelBuilder.Entity<ItemStatus>().OwnsOne(t => t.EntityInfo).Property<int?>(x => x.SortOrder).HasColumnName(@"SortOrder").ValueGeneratedNever();
            modelBuilder.Entity<ItemStatus>().Property<int>(x => x.ItemStatusClassId).HasColumnName(@"ItemStatusClassId").ValueGeneratedNever();
            modelBuilder.Entity<ItemStatus>().HasKey(@"Id");
        }

        partial void CustomizeItemStatusMapping(ModelBuilder modelBuilder);

        #endregion

        #region ItemTypeClass Mapping

        private void ItemTypeClassMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ItemTypeClass>().ToTable(@"ItemTypeClass");
            modelBuilder.Entity<ItemTypeClass>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ItemTypeClass>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ItemTypeClass>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<ItemTypeClass>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<ItemTypeClass>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Code).HasColumnName(@"Code").ValueGeneratedNever();
            modelBuilder.Entity<ItemTypeClass>().OwnsOne(t => t.EntityInfo).Property<int?>(x => x.SortOrder).HasColumnName(@"SortOrder").ValueGeneratedNever();
            modelBuilder.Entity<ItemTypeClass>().HasKey(@"Id");
        }

        partial void CustomizeItemTypeClassMapping(ModelBuilder modelBuilder);

        #endregion

        #region ItemStatusClass Mapping

        private void ItemStatusClassMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ItemStatusClass>().ToTable(@"ItemStatusClass");
            modelBuilder.Entity<ItemStatusClass>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ItemStatusClass>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ItemStatusClass>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<ItemStatusClass>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<ItemStatusClass>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Code).HasColumnName(@"Code").ValueGeneratedNever();
            modelBuilder.Entity<ItemStatusClass>().OwnsOne(t => t.EntityInfo).Property<int?>(x => x.SortOrder).HasColumnName(@"SortOrder").ValueGeneratedNever();
            modelBuilder.Entity<ItemStatusClass>().HasKey(@"Id");
        }

        partial void CustomizeItemStatusClassMapping(ModelBuilder modelBuilder);

        #endregion

        #region BusinessUnit Mapping

        private void BusinessUnitMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BusinessUnit>().ToTable(@"BusinessUnit");
            modelBuilder.Entity<BusinessUnit>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BusinessUnit>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BusinessUnit>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<BusinessUnit>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<BusinessUnit>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Code).HasColumnName(@"Code").ValueGeneratedNever();
            modelBuilder.Entity<BusinessUnit>().OwnsOne(t => t.EntityInfo).Property<int?>(x => x.SortOrder).HasColumnName(@"SortOrder").ValueGeneratedNever();
            modelBuilder.Entity<BusinessUnit>().HasKey(@"Id");
        }

        partial void CustomizeBusinessUnitMapping(ModelBuilder modelBuilder);

        #endregion

        #region RefCity Mapping

        private void RefCityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RefCity>().ToTable(@"RefCity");
            modelBuilder.Entity<RefCity>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<RefCity>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RefCity>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<RefCity>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<RefCity>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Code).HasColumnName(@"Code").ValueGeneratedNever();
            modelBuilder.Entity<RefCity>().OwnsOne(t => t.EntityInfo).Property<int?>(x => x.SortOrder).HasColumnName(@"SortOrder").ValueGeneratedNever();
            modelBuilder.Entity<RefCity>().Property<int>(x => x.CountryId).HasColumnName(@"CountryId").ValueGeneratedNever();
            modelBuilder.Entity<RefCity>().Property<int>(x => x.RefCountryId).HasColumnName(@"RefCountryId").ValueGeneratedNever();
            modelBuilder.Entity<RefCity>().HasKey(@"Id");
        }

        partial void CustomizeRefCityMapping(ModelBuilder modelBuilder);

        #endregion

        #region RefCountry Mapping

        private void RefCountryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RefCountry>().ToTable(@"RefCountry");
            modelBuilder.Entity<RefCountry>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<RefCountry>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<RefCountry>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<RefCountry>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Remarks).HasColumnName(@"Remarks").ValueGeneratedNever();
            modelBuilder.Entity<RefCountry>().OwnsOne(t => t.EntityInfo).Property<string>(x => x.Code).HasColumnName(@"Code").ValueGeneratedNever();
            modelBuilder.Entity<RefCountry>().OwnsOne(t => t.EntityInfo).Property<int?>(x => x.SortOrder).HasColumnName(@"SortOrder").ValueGeneratedNever();
            modelBuilder.Entity<RefCountry>().HasKey(@"Id");
        }

        partial void CustomizeRefCountryMapping(ModelBuilder modelBuilder);

        #endregion

        #region Agent Mapping

        private void AgentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Agent>().ToTable(@"Agent");
            modelBuilder.Entity<Agent>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Agent>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent>().Property<string>(x => x.Description).HasColumnName(@"Description").ValueGeneratedNever();
            modelBuilder.Entity<Agent>().Property<string>(x => x.Roles).HasColumnName(@"Roles").ValueGeneratedNever().HasMaxLength(8000);
            modelBuilder.Entity<Agent>().HasKey(@"Id");
        }

        partial void CustomizeAgentMapping(ModelBuilder modelBuilder);

        #endregion

        #region Agent_instructions Mapping

        private void Agent_instructionsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Agent_instructions>().ToTable(@"Agent_instructions");
            modelBuilder.Entity<Agent_instructions>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Agent_instructions>().Property<int>(x => x.AgentId).HasColumnName(@"AgentId").ValueGeneratedNever();
            modelBuilder.Entity<Agent_instructions>().Property<string>(x => x.Title).HasColumnName(@"Title").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent_instructions>().Property<string>(x => x.Content).HasColumnName(@"Content").ValueGeneratedNever().HasMaxLength(8000);
            modelBuilder.Entity<Agent_instructions>().Property<string>(x => x.keywords).HasColumnName(@"keywords").ValueGeneratedNever();
            modelBuilder.Entity<Agent_instructions>().HasKey(@"Id");
        }

        partial void CustomizeAgent_instructionsMapping(ModelBuilder modelBuilder);

        #endregion

        #region Agent_bin Mapping

        private void Agent_binMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Agent_bin>().ToTable(@"Agent_bin");
            modelBuilder.Entity<Agent_bin>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Agent_bin>().Property<int>(x => x.AgentId).HasColumnName(@"AgentId").ValueGeneratedNever();
            modelBuilder.Entity<Agent_bin>().Property<string>(x => x.Data).HasColumnName(@"Data").ValueGeneratedNever().HasMaxLength(8000);
            modelBuilder.Entity<Agent_bin>().Property<System.DateTime>(x => x.dtAdded).HasColumnName(@"dtAdded").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Agent_bin>().HasKey(@"Id");
        }

        partial void CustomizeAgent_binMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Contact>().HasOne(x => x.ItemType).WithMany().IsRequired(true).HasForeignKey(@"TypeId");
            modelBuilder.Entity<Contact>().HasOne(x => x.ItemStatus).WithMany(op => op.Contacts).IsRequired(true).HasForeignKey(@"StatusId");
            modelBuilder.Entity<Contact>().HasOne(x => x.RefCity).WithMany().IsRequired(true).HasForeignKey(@"RefCityId");

            modelBuilder.Entity<JobMain>().HasOne(x => x.ItemStatus).WithMany().IsRequired(true).HasForeignKey(@"ItemStatusId");
            modelBuilder.Entity<JobMain>().HasOne(x => x.BusinessUnit).WithMany().IsRequired(true).HasForeignKey(@"BusinessUnitId");

            modelBuilder.Entity<JobService>().HasOne(x => x.ServiceItem).WithMany().IsRequired(false).HasForeignKey(@"ServiceItemId");
            modelBuilder.Entity<JobService>().HasOne(x => x.Entity).WithMany().IsRequired(false).HasForeignKey(@"SupplierId");
            modelBuilder.Entity<JobService>().HasOne(x => x.ItemStatus).WithMany().IsRequired(true).HasForeignKey(@"ItemStatusId");

            modelBuilder.Entity<ServiceItem>().HasOne(x => x.ItemType).WithMany().IsRequired(true).HasForeignKey(@"ItemTypeId");
            modelBuilder.Entity<ServiceItem>().HasOne(x => x.ItemStatus).WithMany().IsRequired(true).HasForeignKey(@"ItemStatusId");

            modelBuilder.Entity<JobCustomer>().HasOne(x => x.Entity).WithMany().IsRequired(true).HasForeignKey(@"CustomerId");

            modelBuilder.Entity<JobContact>().HasOne(x => x.Contact).WithMany().IsRequired(true).HasForeignKey(@"ContactId");

            modelBuilder.Entity<JobServiceContact>().HasOne(x => x.Contact).WithMany().IsRequired(true).HasForeignKey(@"ContactId");

            modelBuilder.Entity<Entity>().HasOne(x => x.ItemType).WithMany().IsRequired(true).HasForeignKey(@"EntityTypeId");
            modelBuilder.Entity<Entity>().HasOne(x => x.ItemStatus).WithMany().IsRequired(true).HasForeignKey(@"EntityStatusId");
            modelBuilder.Entity<Entity>().HasOne(x => x.BusinessUnit).WithMany().IsRequired(true).HasForeignKey(@"BusinessUnitId");
            modelBuilder.Entity<Entity>().HasOne(x => x.RefCity).WithMany().IsRequired(true).HasForeignKey(@"RefCityId");

            modelBuilder.Entity<ItemType>().HasOne(x => x.ItemTypeClass).WithMany().IsRequired(true).HasForeignKey(@"ItemTypeClassId");

            modelBuilder.Entity<ItemStatus>().HasOne(x => x.ItemStatusClass).WithMany().IsRequired(true).HasForeignKey(@"ItemStatusClassId");

            modelBuilder.Entity<RefCity>().HasOne(x => x.RefCountry).WithMany().IsRequired(true).HasForeignKey(@"RefCountryId");

            modelBuilder.Entity<Agent_instructions>().HasOne(x => x.Agent).WithMany(op => op.Agent_instructions).IsRequired(true).HasForeignKey(@"AgentId");

            modelBuilder.Entity<Agent_bin>().HasOne(x => x.Agent).WithMany(op => op.Agent_bins).IsRequired(true).HasForeignKey(@"AgentId");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
