import { FieldName } from '../names';
import { FieldCodeParserClientUpdatingBase } from './field-code-parser-client-updating-base';
export declare class FieldCodeParserIf extends FieldCodeParserClientUpdatingBase {
    get name(): FieldName;
    protected fillResult(): boolean;
    getResult(): string;
    private parseParameters;
}
export declare class IfExpression {
    operator: string;
    leftExpression: IfExpressionParameter;
    rightExpression: IfExpressionParameter;
    trueText: string;
    falseText: string;
    static operators: string[];
    constructor(operator: string, leftExpression: IfExpressionParameter, rightExpression: IfExpressionParameter, trueText?: string, falseText?: string);
    static isOperator(operator: string): boolean;
    evaluate(): string;
    private evaluateComparison;
    static compareStrings(leftValue: string, rightValue: string): number;
    static compareStringsWithWildcards(leftValue: string, rightValue: string): 0 | 1;
}
export declare class IfExpressionParameter {
    text: string;
    number: number;
    isNumber: boolean;
    constructor(text: string, isQuoted?: boolean);
}
export declare class IfExpressionError extends Error {
    constructor(message: string);
}
export declare class IfExpressionInvalidOperatorError extends IfExpressionError {
    constructor(message?: string);
}
export declare class IfExpressionTooManyParametersError extends IfExpressionError {
    constructor(message?: string);
}
export declare class IfExpressionMissingParametersError extends IfExpressionError {
    constructor(message?: string);
}
